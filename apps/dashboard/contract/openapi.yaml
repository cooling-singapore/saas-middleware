openapi: 3.0.0
info:
  description: This is a SaaS Middleware Api
  version: 0.0.1
  title: OpenAPI SaaS Middleware
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /login:
    post:
      summary: Login
      tags:
        - Login
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
  /nodes:
    get:
      summary: Get information of all nodes 
      tags:
        - Node
      responses:
        '201': 
          description: Successfully get nodes information
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/node'
            
        '400':
          description: Bad request
  /nodes/{nodeId}:
    parameters:
      - in: path
        name: nodeId
        schema:
          type: string
        required: true
        description: string ID of node
    get:
      summary: Get information of a specific node
      tags:
        - Node
      responses:
        '201':
          description: Successfully get node information for nodeId
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/node'
        '400':
          description: Bad request
    post:
      summary: Deploy a processor to a target node
      tags:
        - Processor
      requestBody:
        description: Processor Type information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                processorType:
                  $ref: '#/components/schemas/processorType'
      responses:
        '201':
          description: Successfully deployed processor to node
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/processor'
        '400':
          description: Bad request
  /nodes/{nodeId}/processors/{processorId}:
    delete:
      summary: Undeploy a processor from a target node
      tags:
        - Processor
      parameters:
        - in: path
          name: nodeId
          description: Id of the node contains the data object
          required: true
          schema:
            type: string
        - in: path
          name: processorId
          description: Id of the target processor
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully undeploy processor from node
        '400':
          description: Bad request
  /nodes/{nodeId}/data_objects/{dataObjectId}:
    parameters:
      - in: path
        name: nodeId
        description: Id of the node contains the target data object
        required: true
        schema:
          type: string
      - in: path
        name: dataObjectId
        description: Id of the target data object
        required: true
        schema:
          type: string
    put:
      summary: transfer target data object from current node to a specific node
      tags:
        - Data Object
      requestBody:
        description: Targetted node information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                processorType:
                  $ref: '#/components/schemas/node'
      responses:
        '201':
          description: Successfully transfer data object
        '400':
          description: Bad request
    delete:
      summary: delete target data object from current node
      tags:
        - Data Object
      responses:
        '201':
          description: Successfully deleted data object
        '400':
          description: Bad request
    get:
      summary: get target data object for visualization
      tags:
        - Data Object
      responses:
        '201':
          description: Successfully get data object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/dataObject'
        '400':
          description: Bad request
  /users:
    get:
      summary: Get all user information
      tags:
        - User
      responses:
        '201':
          description: Successfully get user information
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/user'
        '400':
          description: Bad request
    post:
      summary: Create a user
      tags:
        - User
      responses:
        '201':
          description: Successfully create user
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        description: Id of the user
        required: true
        schema:
          type: string
    get:
      summary: Get information of a specific user
      tags:
        - User

      responses:
        '201':
          description: Successfully get user information
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
    delete:
      summary: delete a specific user
      tags:
        - User
      responses:
        '201':
          description: Successfully deleted user
        '400':
          description: Bad request
    put:
      summary: put a key to a user 
      tags:
        - User
      requestBody:
        description: Key information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  $ref: '#/components/schemas/key'
      responses:
        '201':
          description: Successfully deleted user
        '400':
          description: Bad request
components:
  schemas:
    accessToken:
      title: Access Token
      description: Access Token
      properties:
        access_token:
          type: string
        message:
          type: string
          example: Logged in as user
    job:
      title: Job
      description: Job in a processor
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          description: Type of the job
        status:
          type: integer
          description: Status of the job
          example: Finished, Queued, In progress
    processor:
      title: Processor
      description: Deployed processor instance
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          description: Type of the processor instance
          example: AIA, SingV, IEM
        status:
          type: integer
          description: Status of the processor
          example: Idle, Busy, Work
        jobs:
          type: array
          description: Jobs in the processor
          items:
            $ref: '#/components/schemas/job'
    dataObject:
      title: Data Object
      description: Data object for input or stage results
      required:
        - id
        - type
        - owner
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          description: Type of the data object
          example: 3d model, Heatmap
        owner:
          type: string
          description: Owner of the data object
        url:
          type: string
          description: Url link to the raw data
          example: https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv
    node:
      title: Node
      description: Node holds instance of processors and data objects
      required:
        - id
      properties:
        id:
          type: string
        type:
          type: string
          description: Type of the node
        dataObjects:
          type: array
          description: Data objects in the node
          items:
            $ref: '#/components/schemas/dataObject'
        processors:
          type: array
          description: Processors in the node
          items:
            $ref: '#/components/schemas/processor'
    processorType:
      title: Processor type
      description: Processors to be deployed
      properties:
        type:
          type: string
          description: Type of the processor
        version:
          type: string
          description: Version of the processor
        url:
          type: string
          description: Code repository of the processor code
          example: https://github.com/cooling-singapore/mWRF_SG
    user:
      title: User
      description: A user of the system
      properties:
        id:
          type: string
          description: User ID
        type:
          type: string
          description: Type of the user, indicates privilege of the user 
          example: admin, user
        keys:
          type: array
          description: Keys of the user 
          items:
            $ref: '#/components/schemas/key'
    key:
      title: Key
      description: A private key of a data object
      properties:
        key:
          type: string
          description: private key
        dataObjectId:
          type: string
          description: Id of the data object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
