import logging
import smtplib

logger = logging.getLogger('email.service')


class SMTPWrapper:
    def __init__(self, smtp):
        self._smtp = smtp

    def send(self, sender, receiver, subject, body):
        try:
            self._smtp.sendmail(sender, receiver, f"From: {sender}\nTo: {receiver}\nSubject: {subject}\n\n{body}")
            return True

        except smtplib.SMTPException as e:
            logger.error(f"failed to send email: {e}")
            return False

    def close(self):
        self._smtp.close()


class EmailService:
    def __init__(self, keystore):
        self._keystore = keystore

    def _send_email(self, receiver, subject, body):
        # get smtp session
        smtp = self._keystore.smtp()
        if smtp is not None:
            sender = self._keystore.identity().email()
            result = smtp.send(sender, receiver, subject, body)
            smtp.close()
            return result
        else:
            logger.error(f"failed to send email: no SMTP session")
            return False

    def send_ownership_transfer_notification_to_prev_owner(self, new_owner, prev_owner, obj_id, address):
        subject = f"Transfer of Ownership Notification"

        body = f"Dear {prev_owner.name()},\n\n" \
               f"This is to inform you that the ownership of a data object you own has been transferred to a " \
               f"new user.\n" \
               f"- Data Object Id: {obj_id}\n" \
               f"- New Owner: {new_owner.name()} <{new_owner.email()}>\n" \
               f"- DOR Address: {address}\n\n"

        return self._send_email(prev_owner.email(), subject, body)

    def send_ownership_transfer_notification_to_new_owner(self, new_owner, prev_owner, obj_id, address, request=None):
        subject = f"Transfer of Ownership Notification"

        body = f"Dear {new_owner.name()},\n\n" \
               f"This is to inform you that the ownership of a data object has been transferred to you.\n" \
               f"- Data Object Id: {obj_id}\n" \
               f"- Previous Owner: {prev_owner.name()} <{prev_owner.email()}>\n" \
               f"- DOR Address: {address}\n\n"

        # does the new owner have to import the content key?
        if request is not None:
            body += f"The data object is encrypted. Use the SaaS CLI to import the content key for this data object " \
                    f"into your keystore:\n" \
                    f"saas_cli request\n\n"

            body += f"Request Content (when asked by the CLI, simply copy and paste the following):\n" \
                    f"{request}\n\n" \

        return self._send_email(new_owner.email(), subject, body)

    def send_content_key_request(self, owner, obj_id, user, address, request):
        subject = f"Request for Content Key"

        body = f"Dear {owner.name()},\n\n" \
               f"You have a pending request for the content key of one of your data objects. This request has been " \
               f"auto-generated by an RTI instance on behalf of a user who wants to process the contents of your " \
               f"data object.\n" \
               f"- Data Object Id: {obj_id}\n" \
               f"- Requesting User: {user.name()} <{user.email()}>\n" \
               f"- RTI Address: {address}\n\n"

        body += f"Use the SaaS CLI to accept or reject this request. Carefully review and follow the instructions" \
                f"provided by the SaaS CLI:\n" \
                f"saas_cli request\n\n"

        body += f"Request Content (when asked by the CLI, simply copy and paste the following):\n" \
                f"{request}\n\n" \

        return self._send_email(owner.email(), subject, body)

    def send_test_email(self, receiver):
        return self._send_email(receiver, "Test Email", "This is a test email.")
