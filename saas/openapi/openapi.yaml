openapi: 3.0.0
info:
  description: "This is the API specification for the SaaS Middleware. Note that the initial version of the SaaS
  Middleware is under active development and the specification will change. Versioning follows the Semantic Versioning
  2.0 (https://semver.org/spec/v2.0.0.html)."
  version: 0.1.0
  title: Simulation-as-a-Service (SaaS) Middleware API
#  license:
#    name: Apache 2.0
#    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /repository:
    get:
      description: "Searches the DOR for data objects with tags that match the key criterion and the value criterion.
      Data objects can be tagged with an arbitrary number of `key=value` pairs. The key and value criteria are applied
      to the `key` and `value` element of the tag, respectively. For example, assume two tags: `project=P1` and
      `project=P2`. A search with key criterion `project` would return both tags whereas a search with value criterion
      `P1` would only return the first tag."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: query
          name: key_criterion
          schema:
            type: string
        - in: query
          name: value_criterion
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    description: Data Object IDs
                    type: array
                    items:
                      type: string
                    uniqueItems: true
    post:
      description: "Adds a new data object to the DOR and returns the id for this data object. Data objects can be
      regular data objects (i.e., data) or processors data objects (e.g., source code). Depending on the case, a
      corresponding descriptor (either `Data Object Descriptor` or a `Processor Descriptor`) has to be provided. In
      addition, the public key of the data object owner has to be provided. The content of the data object itself is
      uploaded as an attachment (binary). There is no restriction as to the nature or size of the content."
      tags:
        - DOR (Data Object Repository)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  $ref: "#/components/schemas/data_upload"
                attachment:
                  type: string
                  format: binary
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data_object_id:
                    type: string

  /repository/{obj_id}:
    delete:
      description: "Deletes an existing data object with a given `obj_id` from the DOR. This action can only be carried
      out by the owner of the data object. If deletion was successful, the descriptor (either data object descriptor
      or processor descriptor) of the deleted data object is returned."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    oneOf:
                      - $ref: "#/components/schemas/data_object_descriptor"
                      - $ref: "#/components/schemas/processor_descriptor"

  /repository/{obj_id}/content:
    get:
      description: "Requests to download the content of a data object with a given `obj_id`. This action can only be
      carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: "Data object {obj_id} not found"

  /repository/{obj_id}/descriptor:
    get:
      description: "Requests to download the descriptor a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    oneOf:
                      - $ref: "#/components/schemas/data_object_descriptor"
                      - $ref: "#/components/schemas/processor_descriptor"

  /repository/{obj_id}/access:
    get:
      description: "Requests a list of identities that have access to a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    description: IDs of identities that have been granted access to the data object.
                    type: array
                    items:
                      type: string
                    uniqueItems: True
    post:
      description: "Grants access for a data object with a given `obj_id` to an identity with a given `public_key`.
      This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: "The public key of the identity that should be granted access to the data object."
                  type: string
                permission:
                  description: "Reserved for future use."
                  type: string
              required:
                - public_key
                - permission
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Access granted.
    delete:
      description: "Revokes access for a data object with a given `obj_id` to an identity with a given `public_key`.
      This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Access revoked.

  /repository/{obj_id}/owner:
    get:
      description: "Requests a the ID and the public key of the identity that owns a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner_iid:
                    type: string
                  owner_public_key:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Data object {obj_id} not found.
    put:
      description: "Updates the ownership of a data object with a given `obj_id` to a new owner with a given
      `public_key`. This action can only be carried out by the current owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                new_owner_public_key:
                  description: "The public key of the new owner."
                  type: string
              required: [new_owner_public_key]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Ownership of data object '{obj_id}' transferred to '{new_owner_public_key}'.

  /repository/{obj_id}/tags:
    get:
      description: "Requests a list of tags for a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    description: Tags
                    type: array
                    items:
                      type: string
    put:
      description: "Adds a new tag for a data object with a given `obj_id`. A tag comes in the form of a `key=value`
      pair. This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              description: Tags
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                required:
                  - key
                  - value
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Tags updated.
    delete:
      description: "Removes a number of tags from a data object with a given `obj_id`. This action can only be carried
      out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          name: obj_id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "Tags to be removed (i.e., the `key` values of the tags)."
              type: array
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Tags updated.

  /nodedb/node:
    get:
      description: "Requests information about the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/node"
    
  /nodedb/network:
    get:
      description: "Requests information about all peers known to the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/node_network"
  
  /nodedb/identities:
    get:
      description: "Requests information about all identities known to the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identities"
  
  /processor:
    get:
      description: "Request a list of all processors deployed by that node."
      tags:
        - RTI (Runtime Infrastructure)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deployed:
                    description: "IDs of deployed processors."
                    type: array
                    items:
                      type: string
                    uniqueItems: true
    
  /processor/{proc_id}:
    post:
      description: "Requests the node to deploy an instance of a specific processor with a given `proc_id`. Processors
      are treated like data objects, i.e., they have to be uploaded using the corresponding DOR functionality. Once
      available in a DOR, processors can be selectively deployed on nodes by the RTI."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          description: "The ID of the processor to be deployed. Note: this ID is equal to the dID obtained when adding
          the processor to the DOR."
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    $ref: "#/components/schemas/processor_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
    delete:
      description: "Requests the node to undeploy an instance of a specific processor with a given `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} undeployed.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
  
  /processor/{proc_id}/descriptor:
    get:
      description: "Requests the descriptor for a processor with a given `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    $ref: "#/components/schemas/processor_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
  
  /processor/{proc_id}/jobs:
    get:
      description: "Requests a list of all jobs currently being executed by a deployed processor with a given
      `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: "#/components/schemas/job_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not deployed.
    post:
      description: "Submits a new job to the RTI for a specific processor instance, given by its `proc_id`. For this
      purpose the type of the job needs to be specified, which can be either a `task` or `workflow`. In addition,
      depending on the case, a corresponding descriptor (i.e., either a `Task Descriptor` or a `Workflow Descriptor`)
      needs to be provided as well."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/job_upload"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not deployed.
  
  /processor/{proc_id}/jobs/{job_id}:
    get:
      description: "Requests information about a job with a given `job_id` that is (or has been) processed by a
      deployed instance of a processor with a given `proc_id`. If a job is found for the given `proc_id` and `job_id`
      then the descriptor of the job (i.e., either `Task Descriptor` or `Workflow Descriptor`) is returned as well as
      the status of the job."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          schema:
            type: string
          required: true
        - in: path
          name: job_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_descriptor:
                    $ref: "#/components/schemas/job_descriptor"
                  status:
                    $ref: "#/components/schemas/job_status"
                    
        "404":  
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: No job with id {job_id}.

components:
  schemas:
    data_upload:
      title: Data Upload
      type: object
      properties:
          type:
            type: string
            enum: [data_object, processor]
          owner_public_key:
            type: string
          descriptor:
            oneOf:
              - $ref: "#/components/schemas/data_object_descriptor"
              - $ref: "#/components/schemas/processor_descriptor"
            discriminator:
              propertyName: type
              mapping:
                data_object: "#/components/schemas/data_object_descriptor"
                processor: "#/components/schemas/processor_descriptor"
      required:
        - type
        - owner_public_key
        - descriptor

    data_object_descriptor:
      title: Data Object Descriptor
      type: object
      properties:
        data_type:
          description: Data Type
          type: string
        data_format:
          description: Data Format
          type: string
        created_t:
          description: Time created
          type: number
        created_by:
          type: string
          description: Owner of the data object
      required:
        - data_type
        - data_format
        - created_t
        - created_by

    recipe:
      title: Recipe
      type: object
      properties:
        task_descriptor:
          $ref: "#/components/schemas/task_descriptor"
        output_name:
          type: string
      required:
        - task_descriptor
        - output_name

    task_descriptor:
      title: Task Descriptor
      type: object
      properties:
        processor_id:
          type: string
        input:
          $ref: "#/components/schemas/input_interface"
        output:
          $ref: "#/components/schemas/output_interface"
      required:
        - processor_id
        - input
        - output

    input_interface:
      title: Input Interface
      allOf:
        - properties:
            name:
              type: string
            type:
              type: string
              enum: [reference, value]
          discriminator:
            propertyName: type
            mapping:
              reference: "#/components/schemas/input_interface_reference"
              value: "#/components/schemas/input_interface_value"
          required:
            - name
            - type
        - oneOf:
            - $ref: "#/components/schemas/input_interface_reference"
            - $ref: "#/components/schemas/input_interface_value"

    input_interface_reference:
      title: Input Interface Reference
      type: object
      properties:
        obj_id:
          type: string
      required:
        - obj_id

    input_interface_value:
      title: Input Interface Value
      type: object
      properties:
        value:
          type: object
      required:
        - value

    output_interface:
      title: Output Interface
      properties:
        owner_public_key:
          type: string
      required:
        - owner_public_key

    processor_descriptor:
      title: Processor Descriptor
      type: object
      properties:
        created_t:
          type: number
        created_by:
          type: string
      required:
        - created_t
        - created_by

    node:
      title: Node
      type: object
      properties:
        iid:
          type: string
        name:
          type: string
        public_key:
          type: string
        rest_service_address:
          type: string
        p2p_service_address:
          type: string
    
    node_network:
      title: Node Network
      type: array
      items:
        type: object
        properties:
          iid:
            type: string
          last_seen:
            type: number
          p2p_address:
            type: string
          rest_address:
            type: string
      
    identities:
      title: Identities
      type: array
      items:
        type: object
        properties:
          iid:
            type: string
          public_key:
            type: string
          name:
            type: string
          email:
            type: string
          nonce:
            type: number
          signature:
            type: string
    
    job_upload:
      title: Job Upload
      allOf:
        - properties:
            type:
              type: string
              enum:
                - task
                - workflow
          discriminator:
            propertyName: type
            mapping:
              task: "#/components/schemas/task_descriptor"
              workflow: "#/components/schemas/workflow_descriptor"
          required: [type]
        - oneOf:
          - $ref: "#/components/schemas/task_descriptor" 
          - $ref: "#/components/schemas/workflow_descriptor"

    workflow_descriptor:
      title: Workflow Descriptor
      type: object
      properties:
        name:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/workflow_task_descriptor"
      required:
        - name
        - tasks

    workflow_task_descriptor:
      title: Workflow Task Descriptor
      type: object
      allOf:
        - properties:
            name:
              type: string
          required: [name]
        - $ref: "#/components/schemas/task_descriptor"
    
    job_descriptor:
      title: Job Descriptor
      type: object
      properties:
        id:
          type: string
        proc_id:
          type: string
        descriptor:
          oneOf:
            - $ref: "#/components/schemas/task_descriptor" 
            - $ref: "#/components/schemas/workflow_descriptor"
      
    job_status:
      title: Job status
      type: object
      properties:
        status:
          type: string
      additionalProperties: true
        