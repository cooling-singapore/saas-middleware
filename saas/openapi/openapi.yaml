openapi: 3.0.0
info:
  description: " This is the API specification for the SaaS Middleware. Note that the initial version of the SaaS
  Middleware is under active development and the specification will change.

  ### Versioning\n
  This API specification uses Semantic Versioning 2.0 (https://semver.org/spec/v2.0.0.html).

  ### Notes\n
  Public keys are used throughout the SaaS Middleware. Unless mentioned otherwise, the term 'public key' here refers
  to PEM-encoded string representation of the public key portion of an Elliptic Curve key pair. This public key
  string representation can be either truncated or not. Truncation omits the header `-----BEGIN PUBLIC KEY-----` and
  the footer `-----END PUBLIC KEY-----`. For example, the following is a truncated PEM-encoded public key:
  `MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEDyDe4dSQlxy110VkTRhkqDAxCR3JxJvL4tVzQParZEUsR6DTB`.
  "
  version: 0.1.0
  title: Simulation-as-a-Service (SaaS) Middleware API

paths:
  /repository:
    get:
      description: "Searches the DOR for data objects with tags that match the key criterion and the value criterion.
      Data objects can be tagged with an arbitrary number of `key=value` pairs. The key and value criteria are applied
      to the `key` and `value` element of the tag, respectively. For example, assume two tags: `project=P1` and
      `project=P2`. A search with key criterion `project` would return both tags whereas a search with value criterion
      `P1` would only return the first tag."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: query
          description: "The key criterion. May SQL-style wildcard characters: '%' representing zero or more characters;
          and '_' representing a single character."
          name: key_criterion
          schema:
            type: string
            example: "ke%"
        - in: query
          description: "The value criterion. May SQL-style wildcard characters: '%' representing zero or more characters;
          and '_' representing a single character."
          name: value_criterion
          schema:
            type: string
            example: "valu_"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    description: IDs of data objects with tags matching the search criteria.
                    type: array
                    items:
                      type: string
                      example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
                    uniqueItems: true
    post:
      description: "Adds a new data object to the DOR and returns the id for this data object. Data objects can be
      regular data objects (i.e., data) or processors data objects (e.g., source code). Depending on the case, a
      corresponding descriptor (either `Data Object Descriptor` or a `Processor Descriptor`) has to be provided. In
      addition, the public key of the data object owner has to be provided. The content of the data object itself is
      uploaded as an attachment (binary). There is no restriction as to the nature or size of the content."
      tags:
        - DOR (Data Object Repository)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  $ref: "#/components/schemas/data_upload"
                attachment:
                  type: string
                  format: binary
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data_object_id:
                    description: "The ID of the newly created data object."
                    type: string
                    example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"

  /repository/{obj_id}:
    delete:
      description: "Deletes an existing data object with a given `obj_id` from the DOR. This action can only be carried
      out by the owner of the data object. If deletion was successful, the descriptor (either data object descriptor
      or processor descriptor) of the deleted data object is returned."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object that is to be deleted."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    oneOf:
                      - $ref: "#/components/schemas/data_object_descriptor"
                      - $ref: "#/components/schemas/processor_descriptor"

  /repository/{obj_id}/content:
    get:
      description: "Requests to download the content of a data object with a given `obj_id`. This action can only be
      carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object whose content is requested for download."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: "Data object {obj_id} not found"

  /repository/{obj_id}/descriptor:
    get:
      description: "Requests to download the descriptor a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object whose descriptor is requested"
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    oneOf:
                      - $ref: "#/components/schemas/data_object_descriptor"
                      - $ref: "#/components/schemas/processor_descriptor"

  /repository/{obj_id}/access:
    get:
      description: "Requests a list of identities that have access to a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    description: IDs of identities that have been granted access to the data object.
                    type: array
                    items:
                      type: string
                      example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                    uniqueItems: True
    post:
      description: "Grants access for a data object with a given `obj_id` to an identity with a given `public_key`.
      This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: "The public key of the identity that should be granted access to the data object."
                  type: string
                  example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
                permission:
                  description: "Reserved for future use."
                  type: string
                  example: ""
              required:
                - public_key
                - permission
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Access granted.
    delete:
      description: "Revokes access for a data object with a given `obj_id` to an identity with a given `public_key`.
      This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: "The public key of the identity whose access to the data object should be revoked."
                  type: string
                  example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
              required:
                - public_key
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Access revoked.

  /repository/{obj_id}/owner:
    get:
      description: "Requests a the ID and the public key of the identity that owns a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner_iid:
                    description: "The ID of the identity that owns the data object."
                    type: string
                    example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                  owner_public_key:
                    description: "The public key of the identity that owns the data object."
                    type: string
                    example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Data object {obj_id} not found.
    put:
      description: "Updates the ownership of a data object with a given `obj_id` to a new owner with a given
      `public_key`. This action can only be carried out by the current owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                new_owner_public_key:
                  description: "The public key of the new owner."
                  type: string
                  example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
              required: [new_owner_public_key]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Ownership of data object '{obj_id}' transferred to '{new_owner_public_key}'.

  /repository/{obj_id}/tags:
    get:
      description: "Requests a list of tags for a data object with a given `obj_id`."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: A dictionary of key-value-style tags associated with the data object.
                type: object
                additionalProperties:
                  type: string
                example: {'project': 'Hello World', 'dept': 'D001'}
    put:
      description: "Adds a new tag for a data object with a given `obj_id`. A tag comes in the form of a `key=value`
      pair. This action can only be carried out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      requestBody:
        required: True
        content:
          application/json:
            schema:
              description: A dictionary of key-value-style tags associated with the data object.
              type: object
              additionalProperties:
                type: string
              example: {'project': 'Hello World', 'dept': 'D001'}
              
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Tags updated.
    delete:
      description: "Removes a number of tags from a data object with a given `obj_id`. This action can only be carried
      out by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The ID of the data object."
          name: obj_id
          schema:
            type: string
            example: "3fb4ed78d35d5030780e425a0623fd50acab16c32a87de33dde633109fe41811"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "Tags to be removed (i.e., the 'key' values of the tags)."
              type: array
              items:
                type: string
                example: "project"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Tags updated.

  /processor:
    get:
      description: "Request a list of all processors deployed by that node."
      tags:
        - RTI (Runtime Infrastructure)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deployed:
                    description: "IDs of deployed processors."
                    type: array
                    items:
                      type: string
                      example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
                    uniqueItems: true
    
  /processor/{proc_id}:
    post:
      description: "Requests the node to deploy an instance of a specific processor with a given `proc_id`. Processors
      are treated like data objects, i.e., they have to be uploaded using the corresponding DOR functionality. Once
      available in a DOR, processors can be selectively deployed on nodes by the RTI."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          description: "The ID of the processor to be deployed. A processor can only be deployed if it has already
          been uploaded to a DOR. The ID of the processor is equal to the data object ID obtained when uploading the
          processor to the DOR."
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    $ref: "#/components/schemas/processor_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
    delete:
      description: "Requests the node to undeploy an instance of a specific processor with a given `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          description: "The ID of the processor."
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} undeployed.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
  
  /processor/{proc_id}/descriptor:
    get:
      description: "Requests the descriptor for a processor with a given `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          name: proc_id
          description: "The ID of the processor."
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  descriptor:
                    $ref: "#/components/schemas/processor_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not found.
  
  /processor/{proc_id}/jobs:
    get:
      description: "Requests a list of all jobs currently being executed by a deployed processor with a given
      `proc_id`."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The ID of the processor."
          name: proc_id
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    description: "A list of jobs processed by this processor."
                    type: array
                    example: [{'descriptor': {'input': [{'name': 'a', 'type': 'value', 'value': {'v': 1}}, {'name': 'b', 'type': 'value', 'value': {'v': 2}}], 'output': {'owner_public_key': 'MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEH/VfN2x0QhMcrnx4iA24dowZWGSoeMGaeUKEXXGIguPXKbqsC2us+U/DYur0KqbVwZREfkwBfzpMOnE+dNxkzFjZXGhOW4bgYa/aGWfAkP17VSleQckUTOxn/DxgopH0'}, 'processor_id': 'fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e'}, 'id': 0, 'proc_id': 'fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e'}]
                    items:
                      $ref: "#/components/schemas/job_descriptor"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not deployed.
    post:
      description: "Submits a new job to the RTI for a specific processor instance, given by its `proc_id`. For this
      purpose the type of the job needs to be specified, which can be either a `task` or `workflow`. In addition,
      depending on the case, a corresponding descriptor (i.e., either a `Task Descriptor` or a `Workflow Descriptor`)
      needs to be provided as well."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The ID of the processor."
          name: proc_id
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/job_upload"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    description: "The ID of the newly created job."
                    type: string
                    example: "24"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Processor {proc_id} not deployed.
  
  /processor/{proc_id}/jobs/{job_id}:
    get:
      description: "Requests information about a job with a given `job_id` that is (or has been) processed by a
      deployed instance of a processor with a given `proc_id`. If a job is found for the given `proc_id` and `job_id`
      then the descriptor of the job (i.e., either `Task Descriptor` or `Workflow Descriptor`) is returned as well as
      the status of the job."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The ID of the processor."
          name: proc_id
          schema:
            type: string
            example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
          required: true
        - in: path
          description: "The ID of the job."
          name: job_id
          schema:
            type: string
            example: "1"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_descriptor:
                    description: "The descriptor of the job."
                    $ref: "#/components/schemas/job_descriptor"
                    example: {'descriptor': {'input': [{'name': 'a', 'type': 'value', 'value': {'v': 1}}, {'name': 'b', 'type': 'value', 'value': {'v': 2}}], 'output': {'owner_public_key': 'MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEH/VfN2x0QhMcrnx4iA24dowZWGSoeMGaeUKEXXGIguPXKbqsC2us+U/DYur0KqbVwZREfkwBfzpMOnE+dNxkzFjZXGhOW4bgYa/aGWfAkP17VSleQckUTOxn/DxgopH0'}, 'processor_id': 'fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e'}, 'id': 0, 'proc_id': 'fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e'}
                  status:
                    description: "Status information about the job. The exact contents of this information depends
                    on the processor is not further specified here. However, status information always needs to
                    include the state of the job. "
                    type: object
                    properties:
                      state:
                        type: string
                        enum: [initialised, running, failed, successful]
                        example: {'state': 'initialised'}
                    additionalProperties: true

        "404":  
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: No job with id {job_id}.

  /nodedb/node:
    get:
      description: "Requests information about the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: "Provides useful information about a node, including the ID and public key of its identity as well
                addresses for its REST and P2P services."
                type: object
                properties:
                  name:
                    description: "The name of the node's identity."
                    type: string
                    example: 'Node A'
                  iid:
                    description: "The ID of the node's identity."
                    type: string
                    example: de5fba42d92d7fc1b712ce976b52cc1300f7e8d9e9b0116dade9e5a4f39923cf
                  public_key:
                    description: "The public key of the node's identity."
                    type: string
                    format: public_key
                    example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEHaYrMkNnZwkjmmcmTzGPBcUi88V9JJSCPjoF5E8R12ekYVvC0rgRlNzcdTWIXFmfCl5uXx0AcCdRghuZ8rV8aVTz4aAL5m92ffKpvG17xaOfRETnXsabeGS4dL4wEpiu"
                  rest_service_address:
                    description: "The address of the REST service used by this node."
                    type: string
                    example: 127.0.0.1:5000
                  p2p_service_address:
                    description: "The address of the P2P service used by this node."
                    type: string
                    example: 127.0.0.1:4000

  /nodedb/network:
    get:
      description: "Requests information about all peers known to the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    iid:
                      description: "The ID of the peer's identity."
                      type: string
                      example: 223cb4d2e87e43c79667a0b721be5f3ccb2e33a2c33a312d116c1540f1a66c9b
                    last_seen:
                      description: "The time in millisecond since epoch (POSIX timestamp in milliseconds) when the node
                      has seen this peer the last time."
                      type: number
                      example: 1622688464216
                    p2p_address:
                      description: "The address used by the peer for its P2P service."
                      example: 127.0.0.1:4000
                      type: string
                    rest_address:
                      description: "The address used by the peer for its REST service."
                      type: string
                      example: 127.0.0.1:5000

  /nodedb/identities:
    get:
      description: "Requests information about all identities known to the node."
      tags:
        - NodeDB
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    iid:
                      description: "The ID of the identity."
                      type: string
                      example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                    public_key:
                      description: "The public key of the identity."
                      type: string
                      example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
                    name:
                      description: "The name of the identity."
                      type: string
                      example: "John Doe"
                    email:
                      description: "The email of the identity."
                      type: string
                      example: "john.doe@snoooogle.com"
                    nonce:
                      description: "A monotonically increasing number, indicating how recent the information about the
                      identity is. If there are two competing records, the one with the higher nonce value should be
                      considered the more recent and the record with the lower nonce value should be discarded."
                      type: number
                      example: 2
                    signature:
                      description: "A signature, created by using private key of the identity, that can be used to
                      verify the information of this record using the public key of the identity."
                      type: string
                      example: "3066023100d3c3e197e952d1ee9f098571264d355ea4a7bed57270472ea672f2591b89f9e68cef1e252533c1bdb19d002b6a15f0c7023100d241b8c3e6f666e8de3278a36592cb650fa9d04f7e3fc6a4dcba5c58b473422113b31b9c7ac4818b4c84627b580b1e54"

components:
  schemas:
    data_object_descriptor:
      title: Data Object Descriptor
      description: "Provides meta information about a data object, including the data type and format, the time the
      data object has been created as well as who created it. Note that there is (currently) no limitations or
      constraints as to what the values can be for the various fields (with exception of `created_t`). Instead, only
      recommendations are provided here."
      type: object
      properties:
        data_type:
          description: "The type of the data object as understood in the context of a particular application. The SaaS
          Middleware supports a multitude of applications. What constitutes a valid data type can this not be defined
          here but must be done so for each application. For example, in the application context of a 'Digital Urban
          Climate Twin', there may be data types such as 'AH-Heat-Profile' or 'Climatic-Data'."
          type: string
          example: "AH-Heat-Profile"
        data_format:
          description: "The format of the data object. This may refer to the specific format or scheme used to encode
          the data object content. The purpose of this field is to provide information on how to decode or interpret
          the data object content. For example, commonly used data formats are 'json' or 'csv'. Data type and format
          should be considered together. For example, there can be data objects with the same data type but different
          data formats."
          type: string
          example: "hdf5"
        created_t:
          description: "A timestamp indicating when the data object has been created. The SaaS Middleware does not
          (currently) impose any particular timestamp format or encoding so as long as it is a number. However, it is
          recommended to use a commonly used encoding such as POSIX time. In addition, the SaaS Middleware does not
          specify what exactly constitutes as the time of creation. In practice, this may often refer to the point in
          time at which the data object has been created in the system. In other words, the time when the data object
          has been added to the DOR."
          type: number
          example: 1622688464216
        created_by:
          type: string
          description: "A reference to who created the data object. The SaaS Middleware does not specify who qualifies
          as creator of a data object. Furthermore, it is not specified if this field is a clear name, such as 'John
          Doe', or using the ID of an identity. However, it is recommended to use references that are meaningful in the
          application context. For example, in practice this could mean to use the ID of the identity that has added
          the data object to the DOR."
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
        recipe:
          description: "Provides the necessary information to reproduce a data object. The SaaS Middleware allows for
          processors to consume data objects (input) and to produce new data objects (output). A recipe thus contains
          the ID of the processor that produced the data object as well as the descriptor of the task that was used by
          the processor to create the data object. A recipe is automatically generated by the RTI. Recipes are not
          available for data objects that have been added manually to the DOR."
          type: object
          properties:
            task_descriptor:
              $ref: "#/components/schemas/task_descriptor"
            output_name:
              description: "The name of the processor output associated with this data object. A processor can produce
              multiple data objects as part of carrying out a task. Each output of a processors is uniquely named (see
              processor descriptor). In order to know which of the outputs is associated with this data object, the name
              of the output is included in the recipe."
              type: string
              example: "output-1"
          required:
            - task_descriptor
            - output_name
      required:
        - data_type
        - data_format
        - created_t
        - created_by

    processor_descriptor:
      title: Processor Descriptor
      description: "Provides meta information about a processor data object, similar to the descriptor of a regular
      data object. Most importantly, processor data objects are not produced as output by processors. Instead,
      processor data objects are uploaded manually. Recipes are thus not available. A processor data object descriptor
      only include the time the processor data object has been created as well as who created it."
      type: object
      properties:
        created_t:
          description: "A timestamp indicating when the data object has been created. The SaaS Middleware does not
          (currently) impose any particular timestamp format or encoding so as long as it is a number. However, it is
          recommended to use a commonly used encoding such as POSIX time. In addition, the SaaS Middleware does not
          specify what exactly constitutes as the time of creation. In practice, this may often refer to the point in
          time at which the data object has been created in the system. In other words, the time when the data object
          has been added to the DOR."
          type: number
          example: 1622688464216
        created_by:
          description: "A reference to who created the data object. The SaaS Middleware does not specify who qualifies
          as creator of a data object. Furthermore, it is not specified if this field is a clear name, such as 'John
          Doe', or using the ID of an identity. However, it is recommended to use references that are meaningful in the
          application context. For example, in practice this could mean to use the ID of the identity that has added
          the data object to the DOR."
          type: string
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
      required:
        - created_t
        - created_by

    data_upload:
      title: Data Object Upload Information
      description: "Used when adding a new data object to the DOR. Indicates the type of the data object (`data_object`
      or `processor` for a regular or processor data object, respectively) and its owner (as per the owners public
      key). In addition, a descriptor for the data object has to be provided. Depending on the type of the data
      object, the descriptor either follows the Data Object Descriptor or a Processor Descriptor specification."
      type: object
      properties:
          type:
            type: string
            description: "The type of the data object."
            enum: [data_object, processor]
          owner_public_key:
            type: string
            format: public_key
            description: "The public key of the identity that owns the data object."
            example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
          descriptor:
            oneOf:
              - $ref: "#/components/schemas/data_object_descriptor"
              - $ref: "#/components/schemas/processor_descriptor"
            discriminator:
              propertyName: type
              mapping:
                data_object: "#/components/schemas/data_object_descriptor"
                processor: "#/components/schemas/processor_descriptor"
      required:
        - type
        - owner_public_key
        - descriptor

    task_descriptor:
      title: Task Descriptor
      description: "Specifies the necessary information in order for a task to be carried out. For once this includes
      the ID of the processor this task is meant to be carried out by. For each input specified by the descriptor of
      that processor, a corresponding input data object has to be provided. This can be either a reference to an
      existing data object (using the data object ID) or by providing the value of the input directly. Furthermore,
      the owner of any output data object produced as a result of this task needs to be specified."
      type: object
      properties:
        processor_id:
          description: "The ID of the processor for this task."
          type: string
          example: "fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e"
        input:
          type: array
          items:
            type: object
            allOf:
              - properties:
                  name:
                    description: "The name of the input."
                    type: string
                    example: "input-1"
                  type:
                    description: "The type of the input."
                    type: string
                    enum: [reference, value]
                required:
                  - name
                  - type
              - oneOf:
                  - reference_item:
                    title: "Reference"
                    type: object
                    properties:
                      obj_id:
                        description: "The ID of a data object used as the input."
                        type: string
                        example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
                    required:
                      - obj_id

                  - value_item:
                    title: "Value"
                    type: object
                    properties:
                      value:
                        description: "A valid JSON object used as the input."
                        type: object
                        example: {value: 5}
                    required:
                      - value
        output:
          properties:
            owner_public_key:
              description: "The public key of the owner of all output data objects."
              type: string
              format: public_key
              example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENflI2XH60a3YK5dyW5Nv5b667gEmNGogSOi9y93mCSWqp0QlLR93NypjFA2Xt8CWcAsXn8qLrdjI6DIu5jGZ+qfGNVa7kxJfCYECUK3lpHNu4hM5BMTKa4iUeRYi5ILA"
          required:
            - owner_public_key
      required:
        - processor_id
        - input
        - output

    workflow_descriptor:
      title: Workflow Descriptor
      description: "Describes a workflow that consists of an arbitrary number of tasks."
      type: object
      properties:
        name:
          description: "The name of the workflow."
          type: string
          example: "Example Workflow"
        tasks:
          description: "An array of tasks that make up this workflow."
          type: array
          items:
            type: object
            allOf:
              - properties:
                  name:
                    description: "The name of this task in the context of the workflow."
                    type: string
                    example: "task-1"
                required: [name]
              - $ref: "#/components/schemas/task_descriptor"
      required:
        - name
        - tasks

    job_upload:
      title: Job Upload
      allOf:
        - properties:
            type:
              description: "The type of the job."
              type: string
              enum:
                - task
                - workflow
          discriminator:
            propertyName: type
            mapping:
              task: "#/components/schemas/task_descriptor"
              workflow: "#/components/schemas/workflow_descriptor"
          required: [type]
        - oneOf:
          - $ref: "#/components/schemas/task_descriptor" 
          - $ref: "#/components/schemas/workflow_descriptor"

    job_descriptor:
      title: Job Descriptor
      description: "Provides information about a specific job. This includes the ID of the job which is a unique
      number assigned by the RTI that executes this job. Furthermore, a job descriptor includes the ID of the processor
      as well as a descriptor of the job (either a Task Descriptor or a Workflow Descriptor)."
      type: object
      properties:
        id:
          description: "The ID of the job"
          type: string
          example: 324
        proc_id:
          description: "The ID of the processor."
          type: string
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
        descriptor:
          oneOf:
            - $ref: "#/components/schemas/task_descriptor" 
            - $ref: "#/components/schemas/workflow_descriptor"


